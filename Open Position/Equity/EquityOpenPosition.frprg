// ------------------------------------------------------------------------------
//                     Author    : eFront-BP2S
//                     Time-stamp: "2018-08-27 14:25:30 jpdur"
// ------------------------------------------------------------------------------

LIBNAME USER ".";
                                                                                                                                     
// ----------------------------------------------------------------------------------------------------------------------------------
// Use the region as a parameter ==> Default region "Generic Region #4" with the max number of records
// %PARAM REGION_IQID 	   LABEL="Fund Region" 	 NOTNULL INFORMAT="??PICKID(ADMROLE;NAME)" DEFAULT="00C148A60D2541F4A6DF45164B06983A";
// NOTNULL does not allow to specify a default value ==> Changed accordingly
// ----------------------------------------------------------------------------------------------------------------------------------
%PARAM REGION_IQID 	   LABEL="Fund Region" 	 INFORMAT="??PICKID(ADMROLE;NAME)" DEFAULT="00C148A60D2541F4A6DF45164B06983A";
%PARAM POSITION_DATE   LABEL="Position Date" TYPE=DATE   DEFAULT="31/12/2017" ;
// %PARAM FUND_IQID       LABEL="Fund"          NOTNULL INFORMAT="??PICKID(VCFUND;FUND)" ;
%PARAM FUND_IQID       LABEL="Fund"          INFORMAT="??PICKID(VCFUND;FUND)" ;
                                         
// Let's Add the USERID of the user who created the allocation
%LET USERID = GetUserInfo(GetUserID(),"IQID1");
                                         
// Create the SQL Extract                
%LET SQLQUERY = %SQLQUERY + "select vcfund.fund as InvestorFund, ";
%LET SQLQUERY = %SQLQUERY + "       sfaaccount.name as InvestorCie, ";
%LET SQLQUERY = %SQLQUERY + "       coalesce(vcfund.currency1, sfaaccount.currency1) as InvestorCurrency, ";
%LET SQLQUERY = %SQLQUERY + "       FundIssuer.fund as IssuerFund, ";
%LET SQLQUERY = %SQLQUERY + "       CieIssuer.name as IssuerCie, ";
%LET SQLQUERY = %SQLQUERY + "       y.* ";
// %LET SQLQUERY = %SQLQUERY + "  from (select ins.shortname as InstrumentName, ";
%LET SQLQUERY = %SQLQUERY + "  from (select case substr(ins.shortname,1,1) ";
%LET SQLQUERY = %SQLQUERY + "	 		  		when '0' then '''' || ins.shortname ";
%LET SQLQUERY = %SQLQUERY + "					else 		  	  	  ins.shortname ";
%LET SQLQUERY = %SQLQUERY + "			    end as InstrumentName, ";
%LET SQLQUERY = %SQLQUERY + "               ins2.shortname  as IIName4Search, ";
%LET SQLQUERY = %SQLQUERY + "               ins2.investment, ";
%LET SQLQUERY = %SQLQUERY + "               OpenList.*, ";
// Calculate the Historical Exchage Rate to acquire the position at the right price
%LET SQLQUERY = %SQLQUERY + "               case coalesce(ConsoAmount2,0) when 0 then 1 else ConsoAmount/ConsoAmount2 end as Exchange, ";
%LET SQLQUERY = %SQLQUERY + "               admrole.name    as Region, ";
%LET SQLQUERY = %SQLQUERY + "               ins.iqregionid  as RegionIQID, ";
%LET SQLQUERY = %SQLQUERY + "               invest.firm, ";
%LET SQLQUERY = %SQLQUERY + "               invest.fund, ";
%LET SQLQUERY = %SQLQUERY + "               instype.code as InstrumentType, ";
%LET SQLQUERY = %SQLQUERY + "               ins.fund        as FundIssuer, ";
%LET SQLQUERY = %SQLQUERY + "               ins.account     as CieIssuer ";
%LET SQLQUERY = %SQLQUERY + "          from vcinvestmentins ins, ";
%LET SQLQUERY = %SQLQUERY + "               vcinvestmentins ins2, ";
%LET SQLQUERY = %SQLQUERY + "               admrole, ";
%LET SQLQUERY = %SQLQUERY + "               vcinvestment invest, ";
%LET SQLQUERY = %SQLQUERY + "               vcinvestinstype instype, ";
%LET SQLQUERY = %SQLQUERY + "               (select investmentins, ";
// %LET SQLQUERY = %SQLQUERY + "                       '31-Dec-17' as TradeDate, ";
%LET SQLQUERY = %SQLQUERY + "                      to_date('" & Format(%POSITION_DATE,"d/M/yyyy") &"','DD/MM/YYYY') as TradeDate, ";
%LET SQLQUERY = %SQLQUERY + "                       'EQ - Purchase/Subscription (w/o Commitment)' as Type, ";
%LET SQLQUERY = %SQLQUERY + "                       currency as InstrumentCurrency, ";
// %LET SQLQUERY = %SQLQUERY + "                       -- sum(xprincipal) as ConsoPrinc, ";
// %LET SQLQUERY = %SQLQUERY + "                       -- sum(xamount) as ConsoAmount, ";
// %LET SQLQUERY = %SQLQUERY + "                       -- amount/principal in Investor ccy ";
// %LET SQLQUERY = %SQLQUERY + "                       -- amount2/principal2 in Instrument ccy ";
// %LET SQLQUERY = %SQLQUERY + "                       -- amount7/principal7 in Issuer ccy ";
%LET SQLQUERY = %SQLQUERY + "                       sum(xnbshares) as ConsoShares, ";
%LET SQLQUERY = %SQLQUERY + "                       case coalesce(sum(xnbshares),0) when 0 then 1 else sum(BuyAmount2)/sum(xnbshares) end as UnitPrice, ";
%LET SQLQUERY = %SQLQUERY + "                       sum(xprincipal2) as ConsoPrinc2, ";
%LET SQLQUERY = %SQLQUERY + "                       sum(xamount2) as ConsoAmount2, ";
%LET SQLQUERY = %SQLQUERY + "                       sum(BuyAmount2) as ConsoBuyAmount2, ";
%LET SQLQUERY = %SQLQUERY + "                       case coalesce(sum(BuyAmount2),0) when 0 then 0 else sum(BuyAmount)   /sum(BuyAmount2)*sum(xamount2) end as ConsoAmount, ";
%LET SQLQUERY = %SQLQUERY + "                       case coalesce(sum(BuyAmount2),0) when 0 then 0 else sum(BuyPrincipal)/sum(BuyAmount2)*sum(xamount2) end as Principal ";
%LET SQLQUERY = %SQLQUERY + "                  from (select investmentins, ";
%LET SQLQUERY = %SQLQUERY + "                               closedate, ";
%LET SQLQUERY = %SQLQUERY + "                               typeinvestop, ";
// %LET SQLQUERY = %SQLQUERY + "                               -- principal,amount,principal2,amount2, ";
%LET SQLQUERY = %SQLQUERY + "                               currency1 as currency, ";
%LET SQLQUERY = %SQLQUERY + "                               case typeinvestop ";
%LET SQLQUERY = %SQLQUERY + "                                 when 'PEQ' then abs(nbshares) ";
%LET SQLQUERY = %SQLQUERY + "                                 when 'SEQ' then -abs(nbshares) ";
%LET SQLQUERY = %SQLQUERY + "                               end as xnbshares, ";
%LET SQLQUERY = %SQLQUERY + "                               case typeinvestop ";
%LET SQLQUERY = %SQLQUERY + "                                 when 'PEQ' then ";
%LET SQLQUERY = %SQLQUERY + "                                  abs(coalesce(principal, amount)) ";
%LET SQLQUERY = %SQLQUERY + "                                 when 'SEQ' then ";
%LET SQLQUERY = %SQLQUERY + "                                  -abs(coalesce(principal, amount)) ";
%LET SQLQUERY = %SQLQUERY + "                               end as xprincipal, ";
%LET SQLQUERY = %SQLQUERY + "                               case typeinvestop ";
%LET SQLQUERY = %SQLQUERY + "                                 when 'PEQ' then ";
%LET SQLQUERY = %SQLQUERY + "                                  abs(coalesce(principal, amount)) ";
%LET SQLQUERY = %SQLQUERY + "                               end as Buyprincipal, ";
%LET SQLQUERY = %SQLQUERY + "                               case typeinvestop ";
%LET SQLQUERY = %SQLQUERY + "                                 when 'PEQ' then ";
%LET SQLQUERY = %SQLQUERY + "                                  abs(coalesce(amount, 0)) ";
%LET SQLQUERY = %SQLQUERY + "                                 when 'SEQ' then ";
%LET SQLQUERY = %SQLQUERY + "                                  -abs(coalesce(amount, 0)) ";
%LET SQLQUERY = %SQLQUERY + "                               end as xamount, ";
%LET SQLQUERY = %SQLQUERY + "                               case typeinvestop ";
%LET SQLQUERY = %SQLQUERY + "                                 when 'PEQ' then ";
%LET SQLQUERY = %SQLQUERY + "                                  abs(coalesce(amount, 0)) ";
%LET SQLQUERY = %SQLQUERY + "                               end as BuyAmount, ";
%LET SQLQUERY = %SQLQUERY + "                               case typeinvestop ";
%LET SQLQUERY = %SQLQUERY + "                                 when 'PEQ' then ";
%LET SQLQUERY = %SQLQUERY + "                                  abs(coalesce(principal2, amount2)) ";
%LET SQLQUERY = %SQLQUERY + "                                 when 'SEQ' then ";
%LET SQLQUERY = %SQLQUERY + "                                  -abs(coalesce(principal2, amount2)) ";
%LET SQLQUERY = %SQLQUERY + "                               end as xprincipal2, ";
%LET SQLQUERY = %SQLQUERY + "                               case typeinvestop ";
%LET SQLQUERY = %SQLQUERY + "                                 when 'PEQ' then ";
%LET SQLQUERY = %SQLQUERY + "                                  abs(coalesce(amount2, 0)) ";
%LET SQLQUERY = %SQLQUERY + "                               end as BuyAmount2, ";
%LET SQLQUERY = %SQLQUERY + "                               case typeinvestop ";
%LET SQLQUERY = %SQLQUERY + "                                 when 'PEQ' then ";
%LET SQLQUERY = %SQLQUERY + "                                  abs(coalesce(amount2, 0)) ";
%LET SQLQUERY = %SQLQUERY + "                                 when 'SEQ' then ";
%LET SQLQUERY = %SQLQUERY + "                                  -abs(coalesce(amount2, 0)) ";
%LET SQLQUERY = %SQLQUERY + "                               end as xamount2 ";
%LET SQLQUERY = %SQLQUERY + "                          from vcinvestmentop op ";
// %LET SQLQUERY = %SQLQUERY + "                         where closedate <= '31-Dec-17' ";
%LET SQLQUERY = %SQLQUERY + "                      where closedate <= to_date('" & Format(%POSITION_DATE,"d/M/yyyy") &"','DD/MM/YYYY') ";
%LET SQLQUERY = %SQLQUERY + "                           and coalesce(op.draft, 0) = 0 ";
%LET SQLQUERY = %SQLQUERY + "                           and op.iqdeleted = 0 ";
%LET SQLQUERY = %SQLQUERY + "                           and coalesce(op.cancelled, 0) = 0 ";
%LET SQLQUERY = %SQLQUERY + "                           and typeinvestop in ('PEQ', 'SEQ') ";
%LET SQLQUERY = %SQLQUERY + " ";
%LET SQLQUERY = %SQLQUERY + "                        ) x ";
%LET SQLQUERY = %SQLQUERY + "                 group by investmentins, currency ";
%LET SQLQUERY = %SQLQUERY + "                 order by investmentins) OpenList ";
%LET SQLQUERY = %SQLQUERY + " ";
%LET SQLQUERY = %SQLQUERY + "         where openlist.investmentins = ins2.iqid ";
%LET SQLQUERY = %SQLQUERY + "           and ins.iqid = ins2.accountins ";
%LET SQLQUERY = %SQLQUERY + "           and ins2.investment = invest.iqid ";
%LET SQLQUERY = %SQLQUERY + "           and ins.iqregionid = admrole.iqid ";
%LET SQLQUERY = %SQLQUERY + "           and ins.investinstype = instype.iqid ";
%LET SQLQUERY = %SQLQUERY + " ";
%LET SQLQUERY = %SQLQUERY + "        ) y ";
%LET SQLQUERY = %SQLQUERY + "  left join sfaaccount ";
%LET SQLQUERY = %SQLQUERY + "    on y.firm = sfaaccount.iqid ";
%LET SQLQUERY = %SQLQUERY + "  left join vcfund ";
%LET SQLQUERY = %SQLQUERY + "    on y.fund = vcfund.iqid ";
%LET SQLQUERY = %SQLQUERY + "  left join vcfund FundIssuer ";
%LET SQLQUERY = %SQLQUERY + "    on y.FundIssuer = FundIssuer.iqid ";
%LET SQLQUERY = %SQLQUERY + "  left join sfaaccount CieIssuer ";
%LET SQLQUERY = %SQLQUERY + "    on y.CieIssuer = CieIssuer.iqid ";
// To guarantee that the instruments are Equities
%LET SQLQUERY = %SQLQUERY + "   where InstrumentType in ('OS') ";
%LET SQLQUERY = %SQLQUERY + "   and vcfund.iqid like '%" & %FUND_IQID & "%' ";

// // Apply the region filter
// %LET SQLQUERY = %SQLQUERY + "   and RegionIQID like '%" & %REGION_IQID & "%' ";
// // Apply the region filter based on the region
// %LET SQLQUERY = %SQLQUERY + "   and EXISTS (SELECT 1 FROM ADMDYNROLE WHERE USERID='" & %USERID & "' AND READACCESS<>0 AND ROLEID = RegionIQID ) ";
// Apply the region filter
%LET SQLQUERY = %SQLQUERY + "   and vcfund.iqregionid like '%" & %REGION_IQID & "%' ";
// Apply the region filter based on the region
%LET SQLQUERY = %SQLQUERY + "   and EXISTS (SELECT 1 FROM ADMDYNROLE WHERE USERID='" & %USERID & "' AND READACCESS<>0 AND ROLEID = vcfund.iqregionid ) ";

// Extract the data using SQL
PROC SQLIMPORT DATA=WORK.T_OPEN_POSITIONS SQL=%SQLQUERY ;
RUN;

// -------------------------------------------------------------------------------------------
// Let's flag the records from 1 ... as the number of records for Generic Region #4 is >65536
// -------------------------------------------------------------------------------------------
DATA WORK.T_OPEN_POSITIONS;
	 SET WORK.T_OPEN_POSITIONS;

	 COLUMN ROW_NUMBER	TYPE=INTEGER;

	 ROW_NUMBER = NZ(LAG(ROW_NUMBER),0)+1;
	 OUTPUT;
RUN;

// Let's print the number of records
%LET NUMBER_RECORDS  = 0;
PROC MEANS DATA=WORK.T_OPEN_POSITIONS OUT=WORK.COUNT;
	 N ROW_NUMBER (NAME=COUNT_ALLOCATIONS);
RUN;

// Setup the ad-hoc variable
DATA WORK.COUNT;
	 SET WORK.COUNT;
	 %NUMBER_RECORDS = COUNT_ALLOCATIONS;
RUN;

// -------------------------------------------------------------
// Extract the closed positions for checks and verifications
// -------------------------------------------------------------
DATA WORK.T_CLOSED_POSITIONS;
      SET WORK.T_OPEN_POSITIONS (WHERE ConsoShares = 0 ) ;        
RUN;
DATA WORK.T_OPEN_POSITIONS;
      SET WORK.T_OPEN_POSITIONS (WHERE NOT( ConsoShares = 0 ) ) ;
RUN;

// ----------------------------------------------
// Extract the positions where the position is 1
// ----------------------------------------------
DATA WORK.T_POSITION1;
      SET WORK.T_OPEN_POSITIONS (WHERE ConsoPrinc2 = 1 and ConsoAmount2= 1 ) ;
RUN;
DATA WORK.T_OPEN_POSITIONS;
      SET WORK.T_OPEN_POSITIONS (WHERE NOT( ConsoPrinc2 = 1 and ConsoAmount2= 1) ) ;
RUN;

// ----------------------------------------------------------------------
// Extract the positions where the position where the principal <> Amount
// ----------------------------------------------------------------------
DATA WORK.T_PRINC_DIFF_AMOUNT;                        
      SET WORK.T_OPEN_POSITIONS (WHERE ConsoShares*UnitPrice <> ConsoAmount2 ) ;
RUN;                                              
DATA WORK.T_OPEN_POSITIONS;                       
      SET WORK.T_OPEN_POSITIONS (WHERE NOT(ConsoShares*UnitPrice <> ConsoAmount2) ) ;
RUN;                                                           
                                                               
// ----------------------------------------------------------------------
// Extract the positions where the position where the principal <> Amount
// ----------------------------------------------------------------------
DATA WORK.T_NEGATIVE_OPEN_POSITION;                            
      SET WORK.T_OPEN_POSITIONS (WHERE ConsoShares < 0.0  ) ;  
RUN;                                                           
DATA WORK.T_OPEN_POSITIONS;                                    
      SET WORK.T_OPEN_POSITIONS (WHERE NOT(ConsoShares < 0.0) ) ;
RUN;                                                           
                                                               
// ---------------------------------------------               
// Calculate Nb of Positions for stats purposes                
// ---------------------------------------------               
                                                               
// Recalculate the nb of open positions filtered which are correct
%LET NUMBER_CORRECT_POSITIONS  = 0;                            
PROC MEANS DATA=WORK.T_OPEN_POSITIONS OUT=WORK.COUNT;          
	 N ROW_NUMBER (NAME=COUNT_ALLOCATIONS);                    
RUN;                                                           
                                                               
// Setup the ad-hoc variable                                   
DATA WORK.COUNT;                                               
	 SET WORK.COUNT;                                           
	 %NUMBER_CORRECT_POSITIONS = COUNT_ALLOCATIONS;            
RUN;                                                           
                                                               
// Recalculate the nb of closed  positions                     
%LET NUMBER_CLOSED_POSITIONS  = 0;                             
PROC MEANS DATA=WORK.T_CLOSED_POSITIONS OUT=WORK.COUNT;        
	 N ROW_NUMBER (NAME=COUNT_ALLOCATIONS);                    
RUN;                                                           
                                                               
// Setup the ad-hoc variable                                   
DATA WORK.COUNT;                                               
	 SET WORK.COUNT;                                           
	 %NUMBER_CLOSED_POSITIONS = COUNT_ALLOCATIONS;             
RUN;                                                           
                                                               
// --------------------------------------                      
// Display the results of the extracts                         
// --------------------------------------                      
                                                               
// Print the number of records
PROC PRINT ;
PUT "Total Nb Open Positions:" & CSTR(%NUMBER_RECORDS) & " Nb Correct Positions:" & CSTR(%NUMBER_CORRECT_POSITIONS) & " Nb Closed Positions:" & CSTR(%NUMBER_CLOSED_POSITIONS) ;
RUN;

// Print a couple of records for tests
PROC PRINT DATA= WORK.T_NEGATIVE_OPEN_POSITION	MAXROWS=10;Title "Negative Position"		; RUN;
PROC PRINT DATA= WORK.T_PRINC_DIFF_AMOUNT	  	MAXROWS=10;Title "Principal Diff Amount"	; RUN;
PROC PRINT DATA= WORK.T_CLOSED_POSITIONS      	MAXROWS=10;Title "Closed Positions"			; RUN;
PROC PRINT DATA= WORK.T_POSITION1      		  	MAXROWS=10;Title "Position 1"				; RUN;
//PROC PRINT DATA= WORK.T_OPEN_POSITIONS 		  	MAXROWS=10;Title "Standard Open Positions"	; RUN;
                                                               
// -----------------------------------------------------       
// Split the positions because there are more than 65536
// -----------------------------------------------------
// Renumber the positions accordingly from 1 to ....
// -----------------------------------------------------
DATA WORK.T_OPEN_POSITIONS;
	 SET WORK.T_OPEN_POSITIONS;
    
	 ROW_NUMBER = NZ(LAG(ROW_NUMBER),0)+1;
	 OUTPUT;
RUN;
    
// ----------------------------------------------------------------------------------------------------------------------------
// Split the Open Positions tables in 2 tables so that an extract can actually be made easily in order to generate 2 spreadsheets
// ----------------------------------------------------------------------------------------------------------------------------
DATA WORK.T_OPEN_POSITIONS1;
SET WORK.T_OPEN_POSITIONS (where ROW_NUMBER <= 65534) ;
RUN;
DATA WORK.T_OPEN_POSITIONS2;
SET WORK.T_OPEN_POSITIONS (where ROW_NUMBER > 65534) ;
RUN;

// Check that the split was actually done correctly
PROC PRINT DATA= WORK.T_OPEN_POSITIONS1 		  	MAXROWS=10;Title "Standard Open Positions"	; RUN;


// Create the empty structures
DATA T_OPEN_POSITIONS1;SET WORK.T_OPEN_POSITIONS1;STOP;RUN;
DATA T_OPEN_POSITIONS2;SET WORK.T_OPEN_POSITIONS2;STOP;RUN;

// Prepare the empty structure for all the complementary tables
DATA T_NEGATIVE_OPEN_POSITION  ;SET WORK.T_NEGATIVE_OPEN_POSITION	;STOP;RUN;
DATA T_PRINC_DIFF_AMOUNT	   ;SET WORK.T_PRINC_DIFF_AMOUNT	  	;STOP;RUN;
DATA T_CLOSED_POSITIONS		   ;SET WORK.T_CLOSED_POSITIONS      	;STOP;RUN;
DATA T_POSITION1			   ;SET WORK.T_POSITION1      		  	;STOP;RUN;

