// ------------------------------------------------------------------------------
//                     Author    : eFront-BP2S
//                     Time-stamp: "2018-09-20 16:40:32 jpdur"
// ------------------------------------------------------------------------------

LIBNAME ODIR "." ; 

%PARAM IQID_REGION label="Region{F}RÃ©gion" TYPE=STRING INFORMAT="??XID(ADMROLE)" SHOWSELECTEDITEMS;
// %PARAM IQID_INVESTOR_FUND LABEL="Or Fund{F}Fonds" TYPE=STRING INFORMAT="??PICKID(VCFUND;FUND)" DEFAULT = "03D769C670D3456C9FF9B18CCBB0F934" ; // Fund 3432 FONDACO
%PARAM IQID_INVESTOR_FUND LABEL="Or Fund{F}Fonds" TYPE=STRING INFORMAT="??PICKID(VCFUND;FUND)" ; // DEFAULT = "74E9B5A3CE814462A5AFAC32AB33EC01" ; // Fund 4843 Aberdeen Secondary Property
                                                                                                    
//---------------------------------------------                                                     
//  Step 1: Call the calculation Engine                                                             
//---------------------------------------------                                                     
/*In order to load indirect datamart*/                                                              
%DEFINE FOF_INVESTOR_PORTFOLIO_REPORT;                                                              
                                                                                                    
/*In order to load direct datamart*/                                                                
%DEFINE PORTFOLIO_REPORT;                                                                           
                                                                                                    
/*In order to load info on investors*/                                                              
%DEFINE BUILD_INFO_BUSINESS;                                                                        
                                                                                                    
/*In order to load date*/                                                                           
%DEFINE REPORT_DATE;                                                                                
                                                                                                    
// Setup Default value                                                                              
// %LET DATE = YMD(2017,12,31) ;                                                                       

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// %INCLUDE P_DATE;                                                                                 
/******************************************************************************                     
*                                                                                                   
* Report Input Parameter           P_DATE                                                           
*                                                                                                   
* Report date, used in FV_V_PORTCO_TRANSACTIONS and FV_V_FUND_TRANSACTIONS, to filter all           
* transactions before this date                                                                     
*                                                                                                   
*******************************************************************************/                    
%PARAM USECALCENGINE LABEL="Use calculation engine?{F} Utiliser le moteur de calcul ?" TYPE=BOOLEAN DEFAULT=TRUE;
                                                                                                    
%DEFINE REPORT_DATE;                                                                                
                                                                                                    
// %PARAM DATE LABEL="Reference date{F}Date d'arrêté" TYPE=DATE DEFAULT="31/12/2017" NOTNULL;    
%PARAM DATE LABEL="Reference date{F}Date d'arrêté" TYPE=DATE NOTNULL; 

%IF %USECALCENGINE %THEN
    %DEFINE DATAMART_COMPATIBILITY;
%END;
// %INCLUDE P_DATE;
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

%LET USECALCENGINE =TRUE;
%DEFINE DATAMART_COMPATIBILITY;

// Final Investors
DATA WORK.table_investors_final;
	 COLUMN INVESTOR_ID TYPE=STRING;
	 INVESTOR_ID = %IQID_INVESTOR_FUND;
	 OUTPUT;
RUN;
%let IQID_INVESTOR    =collection("WORK.table_investors_final","INVESTOR_ID");
%let IQID_FOF_INVESTOR=collection("WORK.table_investors_final","INVESTOR_ID");

// Extract the data for the given fund as an investor
DATA WORK.SUBSET_FOR_FUND;
	 SET FCE.FV_T_FUND_SEC_POSITIONS_BY_INVESTMENTS ;
RUN;

// Display the data
// PROC PRINT DATA=WORK.SUBSET_FOR_FUND ; RUN;

//-------------------------------------------------------------------------------
//  Step 2: Add the name of Share Class and the different types of operations
//-------------------------------------------------------------------------------

// Prepare the data and complement with the name of the Share Classes
DATA WORK.SUBSET_FOR_FUND;
   MERGE WORK.SUBSET_FOR_FUND (in=Flag1)  CURRENT.[VI_SHARE] (in=Flag2 RENAME=(SHARE_IQID=SHARE_ID));
   BY FUND_ID SHARE_ID;

   IF Flag1 and Flag2 THEN OUTPUT;
   END;
RUN;

// Display the data
// PROC PRINT DATA=WORK.SUBSET_FOR_FUND ; RUN;

// -----------------------------------------------------
// Add the region name based on the FUND characteristics
// -----------------------------------------------------
DATA WORK.SUBSET_FOR_FUND;
   MERGE WORK.SUBSET_FOR_FUND (in=Flag1)  CURRENT.[VI_INVESTOR_REGION] (in=Flag2) ; 
   BY INVESTOR_ID ;

   IF Flag1 and Flag2 THEN OUTPUT;
   END;
RUN;

// Multiply the data for each of the istruction type
DATA WORK.Table_fundops;
	 COLUMN TYPE_FUNDOP TYPE=STRING;

	 TYPE_FUNDOP = "IF: Commitment"			; OUTPUT;
	 TYPE_FUNDOP = "IF: Capital Call"		; OUTPUT;
	 TYPE_FUNDOP = "IF: Distribution"  		; OUTPUT;
	 TYPE_FUNDOP = "IF: Official NAV"       ; OUTPUT;
RUN;

// Cartesian product
DATA WORK.ALL_OPERATIONS;
	 MERGE WORK.Table_fundops WORK.SUBSET_FOR_FUND;
RUN;

// Display the table with ALL_OPERATIONS
PROC PRINT DATA=WORK.ALL_OPERATIONS ; RUN;

//------------------------------------------------------------------
//  Step 3: Split by types operations and proccess them accordingly
//------------------------------------------------------------------
// RATE_SEC_TO_INV to be kept for all sub tables
// Eliminates fields which are not used
DATA WORK.ALL_OPERATIONS; SET WORK.ALL_OPERATIONS (DROP =INVESTMENT_ID FUND_ID FUND_CURRENCY FUND_GROUPBY_ID INVESTMENT_TYPE_CODE INVESTMENT_TYPE INVESTMENT_EXIT_DATE INVESTOR_ID INVESTOR_CURRENCY SHARE_ID SECURITY_FUND_ID SECURITY_ID); RUN;
DATA WORK.ALL_OPERATIONS; SET WORK.ALL_OPERATIONS (DROP =SECURITY_CURRENCY SECURITY_PRICE1 SECURITY_ISCARRIED DATAMART_DATE ID_CURRTABLE_FUND NBSHARE_ROUNDING NBSHARE_ROUNDING_TYPE SHAREPRICE_ROUNDING SHAREPRICE_ROUNDING_TYPE IS_ROUNDINGSHARE_CLASS); RUN;
DATA WORK.ALL_OPERATIONS; SET WORK.ALL_OPERATIONS (DROP =COMMITMENT_IN_AMOUNT RATE_INV_TO_SEC RATE_SEC_TO_FUND SECURITY_CALLED SECURITY_CALLED1 SECURITY_CALLED2 SECURITY_DISTRIBUTED SECURITY_DISTRIBUTED1 SECURITY_DISTRIBUTED2); RUN;
DATA WORK.ALL_OPERATIONS; SET WORK.ALL_OPERATIONS (DROP =REMAINING_COMMITMENT REMAINING_COMMITMENT1 REMAINING_COMMITMENT2 CAPITAL_CALL CAPITAL_CALL1 CAPITAL_CALL2 DISTRIBUTION DISTRIBUTION1 DISTRIBUTION2 CARRY CARRY1 CARRY2); RUN;
DATA WORK.ALL_OPERATIONS; SET WORK.ALL_OPERATIONS (DROP =TRANSACTION_COSTS TRANSACTION_COSTS1 TRANSACTION_COSTS2 COST COST1 COST2 UNSPECIFIED_DIST_OUTSIDE_OF_COMMITMENT UNSPECIFIED_DISTRIBUTION TAX TAX_REFUNDED SECURITY_NAME SECURITY_VALUE1); RUN;
DATA WORK.ALL_OPERATIONS; SET WORK.ALL_OPERATIONS (DROP =LAST_FUNDAMIN_VALUATION_DATE LAST_FUNDAMIN_NOMINAL_VALUATION1 LAST_FUNDAMIN_NB_SHARES LAST_FUNDAMIN_ROUNDED_VALUATION1 LAST_FUNDAMIN_ROUNDED_VALUATION LAST_FUNDAMIN_ROUNDED_VALUATION2); RUN;
DATA WORK.ALL_OPERATIONS; SET WORK.ALL_OPERATIONS (DROP =SECURITY_NOMINAL_CALLED SECURITY_NOMINAL_CALLED1 SECURITY_NOMINAL_BOUGHTBACK SECURITY_NOMINAL_BOUGHTBACK1 LAST_FUNDAMIN_NOMINAL_ROUNDED_VALUATION1 LAST_FUNDAMIN_NOMINAL_ROUNDED_VALUATION); RUN;
DATA WORK.ALL_OPERATIONS; SET WORK.ALL_OPERATIONS (DROP =LAST_FUNDAMIN_NOMINAL_ROUNDED_VALUATION2 SECURITY_PRICE SECURITY_PRICE2 SECURITY_VALUE SECURITY_VALUE2 SECURITY_TOTAL_COMMITMENT SECURITY_TOTAL_COMMITMENT1 SECURITY_TOTAL_COMMITMENT2); RUN;
DATA WORK.ALL_OPERATIONS; SET WORK.ALL_OPERATIONS (DROP =SECURITY_TOTAL_VALUE SECURITY_TOTAL_VALUE1 SECURITY_TOTAL_VALUE2 SECURITY_NOMINAL SECURITY_NOMINAL1 SECURITY_NOMINAL2 LAST_FUNDAMIN_NOMINAL_VALUATION LAST_FUNDAMIN_NOMINAL_VALUATION2); RUN;
DATA WORK.ALL_OPERATIONS; SET WORK.ALL_OPERATIONS (DROP =NB_SHARES_ROUNDED NET_IRR_BY_SECURITY LAST_NAV_DATE TRANSACTION_COSTS1 TRANSACTION_COSTS2 COST COST1 COST2 OTHER_INCOME_OUTSIDE_OF_COMMITMENT GAIN_LOSS_OUTSIDE_OF_COMMITMENT); RUN;
DATA WORK.ALL_OPERATIONS; SET WORK.ALL_OPERATIONS (DROP =INTEREST_OUTSIDE_OF_COMMITMENT UNSPECIFIED_DIST_OUTSIDE_OF_COMMITMENT UNSPECIFIED_DISTRIBUTION TAX TAX_REFUNDED SECURITY_NAME); RUN;
DATA WORK.ALL_OPERATIONS; SET WORK.ALL_OPERATIONS (DROP =SECURITY_VALUE1 LAST_FUNDAMIN_VALUATION_DATE LAST_FUNDAMIN_NOMINAL_VALUATION1 LAST_FUNDAMIN_NB_SHARES LAST_FUNDAMIN_ROUNDED_VALUATION1 LAST_FUNDAMIN_ROUNDED_VALUATION LAST_FUNDAMIN_ROUNDED_VALUATION2); RUN;
DATA WORK.ALL_OPERATIONS; SET WORK.ALL_OPERATIONS (DROP =SECURITY_NOMINAL_CALLED SECURITY_NOMINAL_CALLED1 SECURITY_NOMINAL_BOUGHTBACK SECURITY_NOMINAL_BOUGHTBACK1 LAST_FUNDAMIN_NOMINAL_ROUNDED_VALUATION1 LAST_FUNDAMIN_NOMINAL_ROUNDED_VALUATION); RUN;
DATA WORK.ALL_OPERATIONS; SET WORK.ALL_OPERATIONS (DROP =LAST_FUNDAMIN_NOMINAL_ROUNDED_VALUATION2 SECURITY_PRICE SECURITY_PRICE2 SECURITY_VALUE SECURITY_VALUE2 SECURITY_TOTAL_COMMITMENT SECURITY_TOTAL_COMMITMENT1 SECURITY_TOTAL_COMMITMENT2); RUN;
DATA WORK.ALL_OPERATIONS; SET WORK.ALL_OPERATIONS (DROP =SECURITY_TOTAL_VALUE SECURITY_TOTAL_VALUE1 SECURITY_TOTAL_VALUE2 SECURITY_NOMINAL SECURITY_NOMINAL1 SECURITY_NOMINAL2 LAST_FUNDAMIN_NOMINAL_VALUATION LAST_FUNDAMIN_NOMINAL_VALUATION2); RUN;
DATA WORK.ALL_OPERATIONS; SET WORK.ALL_OPERATIONS (DROP =NB_SHARES_ROUNDED NB_SHARES_CALLED_ROUNDED NB_SHARES_BOUGHTBACK_ROUNDED NET_IRR_BY_SECURITY LAST_NAV_DATE); RUN;
DATA WORK.ALL_OPERATIONS; SET WORK.ALL_OPERATIONS (DROP =FUND REGION_ID); RUN ; // The 2 extra fields added when doing the merge with VI_INVESTOR_REGION


// Create the COMMITMENT_FUNDOP
DATA WORK.COMMITMENT_FUNDOP; SET WORK.ALL_OPERATIONS (WHERE TYPE_FUNDOP = "IF: Commitment") ; RUN;
DATA WORK.COMMITMENT_FUNDOP; SET WORK.COMMITMENT_FUNDOP (DROP =NB_SHARES_CALLED NB_SHARES_BOUGHTBACK CAPITAL_CALL_INSIDE_COMM CAPITAL_CALL_INSIDE_COMM1 CAPITAL_CALL_INSIDE_COMM2); RUN;
DATA WORK.COMMITMENT_FUNDOP; SET WORK.COMMITMENT_FUNDOP (DROP =CAPITAL_CALL_OUTSIDE_COMM CAPITAL_CALL_OUTSIDE_COMM1 CAPITAL_CALL_OUTSIDE_COMM2 MANAGEMENT_FEES MANAGEMENT_FEES1); RUN;
DATA WORK.COMMITMENT_FUNDOP; SET WORK.COMMITMENT_FUNDOP (DROP =MANAGEMENT_FEES2 MANAGEMENT_FEES_OUTSIDE_COMM MANAGEMENT_FEES_OUTSIDE_COMM1 MANAGEMENT_FEES_OUTSIDE_COMM2 OTHER_FEES); RUN;
DATA WORK.COMMITMENT_FUNDOP; SET WORK.COMMITMENT_FUNDOP (DROP =OTHER_FEES1 OTHER_FEES2 OTHER_FEES_OUTSIDE_COMM OTHER_FEES_OUTSIDE_COMM1 OTHER_FEES_OUTSIDE_COMM2 RETURN_OF_CAPITAL RETURN_OF_CAPITAL1 RETURN_OF_CAPITAL2); RUN;
DATA WORK.COMMITMENT_FUNDOP; SET WORK.COMMITMENT_FUNDOP (DROP =REDRAWABLE_CAPITAL REDRAWABLE_CAPITAL1 REDRAWABLE_CAPITAL2 GAIN_LOSS GAIN_LOSS1 GAIN_LOSS2 INTERESTS INTERESTS1 INTERESTS2 DIVIDENDS DIVIDENDS1 DIVIDENDS2); RUN;
DATA WORK.COMMITMENT_FUNDOP; SET WORK.COMMITMENT_FUNDOP (DROP =OTHER_INCOME OTHER_INCOME1 OTHER_INCOME2 OTHER_INCOME_OUTSIDE_OF_COMMITMENT GAIN_LOSS_OUTSIDE_OF_COMMITMENT INTEREST_OUTSIDE_OF_COMMITMENT); RUN;
DATA WORK.COMMITMENT_FUNDOP; SET WORK.COMMITMENT_FUNDOP (DROP =LATE_INTEREST_FEES_OUTSIDE_OF_COMMITMENT LATE_INTEREST_FEES NB_SHARES_CALLED_ROUNDED NB_SHARES_BOUGHTBACK_ROUNDED); RUN;


// Create the CALL_FUNDOP
DATA WORK.CALL_FUNDOP; SET WORK.ALL_OPERATIONS (WHERE TYPE_FUNDOP = "IF: Capital Call") ; RUN;
DATA WORK.CALL_FUNDOP; SET WORK.CALL_FUNDOP (DROP =NB_SHARES_BOUGHTBACK RETURN_OF_CAPITAL RETURN_OF_CAPITAL1 RETURN_OF_CAPITAL2); RUN;
DATA WORK.CALL_FUNDOP; SET WORK.CALL_FUNDOP (DROP =REDRAWABLE_CAPITAL REDRAWABLE_CAPITAL1 REDRAWABLE_CAPITAL2 GAIN_LOSS GAIN_LOSS1 GAIN_LOSS2 INTERESTS INTERESTS1 INTERESTS2); RUN;
DATA WORK.CALL_FUNDOP; SET WORK.CALL_FUNDOP (DROP =DIVIDENDS DIVIDENDS1 DIVIDENDS2 OTHER_INCOME OTHER_INCOME1 OTHER_INCOME2 OTHER_INCOME_OUTSIDE_OF_CALL GAIN_LOSS_OUTSIDE_OF_CALL); RUN;
DATA WORK.CALL_FUNDOP; SET WORK.CALL_FUNDOP (DROP =INTEREST_OUTSIDE_OF_CALL CALL CALL1 CALL2 SECURITY_NB_SHARES_COMMITTED_ROUNDED NB_SHARES_BOUGHTBACK_ROUNDED); RUN;
                                                   
                                                   
// Create the DISTRIBUTION_FUNDOP                  
DATA WORK.DISTRIBUTION_FUNDOP; SET WORK.ALL_OPERATIONS (WHERE TYPE_FUNDOP = "IF: Distribution") ; RUN;
DATA WORK.DISTRIBUTION_FUNDOP; SET WORK.DISTRIBUTION_FUNDOP (DROP =NB_SHARES_DISTRIBUTIONED CAPITAL_DISTRIBUTION_INSIDE_COMM CAPITAL_DISTRIBUTION_INSIDE_COMM1 CAPITAL_DISTRIBUTION_INSIDE_COMM2); RUN;
DATA WORK.DISTRIBUTION_FUNDOP; SET WORK.DISTRIBUTION_FUNDOP (DROP =CAPITAL_DISTRIBUTION_OUTSIDE_COMM CAPITAL_DISTRIBUTION_OUTSIDE_COMM1 CAPITAL_DISTRIBUTION_OUTSIDE_COMM2 MANAGEMENT_FEES MANAGEMENT_FEES1 MANAGEMENT_FEES2); RUN;
DATA WORK.DISTRIBUTION_FUNDOP; SET WORK.DISTRIBUTION_FUNDOP (DROP =MANAGEMENT_FEES_OUTSIDE_COMM MANAGEMENT_FEES_OUTSIDE_COMM1 MANAGEMENT_FEES_OUTSIDE_COMM2 OTHER_FEES OTHER_FEES1 OTHER_FEES2); RUN;
DATA WORK.DISTRIBUTION_FUNDOP; SET WORK.DISTRIBUTION_FUNDOP (DROP =OTHER_FEES_OUTSIDE_COMM OTHER_FEES_OUTSIDE_COMM1 OTHER_FEES_OUTSIDE_COMM2 LATE_INTEREST_FEES_OUTSIDE_OF_COMMITMENT); RUN;
DATA WORK.DISTRIBUTION_FUNDOP; SET WORK.DISTRIBUTION_FUNDOP (DROP =LATE_INTEREST_FEES COMMITMENT COMMITMENT1 COMMITMENT2 SECURITY_NB_SHARES_COMMITTED_ROUNDED NB_SHARES_DISTRIBUTIONED_ROUNDED); RUN;

// Create the VALORISATION_FUNDOP
DATA WORK.VALORISATION_FUNDOP; SET WORK.ALL_OPERATIONS (WHERE TYPE_FUNDOP = "IF: Official NAV") ; RUN;

//---------------------------------------------------------------------
//  Step 4: Specific treatment/adjustments by type of Fund Operations
//---------------------------------------------------------------------

// COMMITMENT: Add a set of standard fields for import
// OPINDEX - DRAFT	- EXCLUDEFROMCASH - GLMANUALENTRIES
DATA WORK.COMMITMENT_FUNDOP;
	 SET WORK.COMMITMENT_FUNDOP;
     COLUMN OPINDEX				TYPE=INTEGER;
     COLUMN DRAFT				TYPE=STRING;
     COLUMN EXCLUDEFROMCASH  	TYPE=STRING;
     COLUMN GLMANUALENTRIES  	TYPE=STRING;
	 COLUMN	DESCRIPTION 		TYPE=STRING;

	 OPINDEX		 = 1;
	 DRAFT   		 = "No" ;
     EXCLUDEFROMCASH = "Yes" ;
     GLMANUALENTRIES = "Yes" ;

	 // Description specific
	 DESCRIPTION = INVESTOR_NAME & " Commitment " & FORMAT(REPORT_DATE,"dd/MM/yyyy") ;
	 OUTPUT;                                                                          
RUN;                                                                                  
                                                                                      
                                                                                      
// CALL: Add a set of standard fields for import                                      
// OPINDEX - DRAFT	- EXCLUDEFROMCASH - GLMANUALENTRIES                               
DATA WORK.CALL_FUNDOP;                                                                
	 SET WORK.CALL_FUNDOP;                                                            
     COLUMN OPINDEX				TYPE=INTEGER;                                         
     COLUMN DRAFT				TYPE=STRING;                                          
     COLUMN EXCLUDEFROMCASH  	TYPE=STRING;                                          
     COLUMN GLMANUALENTRIES  	TYPE=STRING;                                          
	 COLUMN	DESCRIPTION 		TYPE=STRING;                                          
                                                                                      
	 OPINDEX		 = 2;                                                             
	 DRAFT   		 = "No" ;                                                         
     EXCLUDEFROMCASH = "Yes" ;                                                        
     GLMANUALENTRIES = "Yes" ;                                                        
                                                                                      
	 // Description specific                                                          
	 DESCRIPTION = INVESTOR_NAME & " Call " & FORMAT(REPORT_DATE,"dd/MM/yyyy");
                                                                        
	 // Sum of Call Inside and Outside Commitment                                                 
	 CAPITAL_CALL_INSIDE_COMM  = NZ(CAPITAL_CALL_INSIDE_COMM ,0.0) + NZ(CAPITAL_CALL_OUTSIDE_COMM ,0.0) ;
	 CAPITAL_CALL_INSIDE_COMM1 = NZ(CAPITAL_CALL_INSIDE_COMM1,0.0) + NZ(CAPITAL_CALL_OUTSIDE_COMM1,0.0) ;
	 CAPITAL_CALL_INSIDE_COMM2 = NZ(CAPITAL_CALL_INSIDE_COMM2,0.0) + NZ(CAPITAL_CALL_OUTSIDE_COMM2,0.0) ;
	 OUTPUT;
	 
RUN;

// DISTRIBUTION: Add a set of standard fields for import
// OPINDEX - DRAFT	- EXCLUDEFROMCASH - GLMANUALENTRIES
DATA WORK.DISTRIBUTION_FUNDOP;
	 SET WORK.DISTRIBUTION_FUNDOP;
     COLUMN OPINDEX				TYPE=INTEGER;
     COLUMN DRAFT				TYPE=STRING;
     COLUMN EXCLUDEFROMCASH  	TYPE=STRING;
     COLUMN GLMANUALENTRIES  	TYPE=STRING;
	 COLUMN	DESCRIPTION 		TYPE=STRING;

	 // Calculate the specific Exchange Rates
	 COLUMN EXCH_RETURNCAPITAL 	   TYPE = FLOAT;
            
	 OPINDEX		 = 3;
	 DRAFT   		 = "No" ;
     EXCLUDEFROMCASH = "Yes" ;
     GLMANUALENTRIES = "Yes" ;

	 // Calculate FX Rate for Return of Capital amounts
	 IF NZ(RETURN_OF_CAPITAL,0) = 0 THEN               
	 	EXCH_RETURNCAPITAL = 1 ;
	 ELSE
	 	EXCH_RETURNCAPITAL = RETURN_OF_CAPITAL2/RETURN_OF_CAPITAL ;
     END;

	 // Description specific
	 DESCRIPTION = INVESTOR_NAME & " Distribution " & FORMAT(REPORT_DATE,"dd/MM/yyyy");
	 OUTPUT;
RUN;

//------------------------------------------------------------------
//  Step 3: Split by types operations and proccess them accordingly
//------------------------------------------------------------------
PROC PRINT DATA=WORK.COMMITMENT_FUNDOP		; RUN;
PROC PRINT DATA=WORK.CALL_FUNDOP 	   		; RUN;
PROC PRINT DATA=WORK.DISTRIBUTION_FUNDOP    ; RUN;
//PROC PRINT DATA=WORK.VALORISATION_FUNDOP    ; RUN;


//------------------------------------------------------------------
//  Step 4: Create Empty Structures for the generation of document
//------------------------------------------------------------------
DATA ODIR.COMMITMENT_FUNDOP		; SET WORK.COMMITMENT_FUNDOP		; STOP ; RUN;
DATA ODIR.CALL_FUNDOP 	  		; SET WORK.CALL_FUNDOP 	   			; STOP ; RUN;
DATA ODIR.DISTRIBUTION_FUNDOP 	; SET WORK.DISTRIBUTION_FUNDOP   	; STOP ; RUN;
